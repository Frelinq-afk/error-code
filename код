import sqlite3
import telebot
from telebot import types
import logging

# Настройка логирования
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(filename)s - %(lineno)d - %(message)s')
logger = logging.getLogger(__name__)

# Замените на ваш токен бота!
BOT_TOKEN = ''  # Замените на ваш реальный токен
bot = telebot.TeleBot(BOT_TOKEN)

DB_PATH = 'rank.db'


def create_db():
    logger.debug("create_db: Creating or connecting to the database...")
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS ranks (
            user_id INTEGER PRIMARY KEY,
            chat_id INTEGER,
            rank INTEGER
        )
    ''')
    conn.commit()
    conn.close()
    logger.debug("create_db: Database operation completed successfully.")


def get_rank(user_id, chat_id):
    logger.debug(f"get_rank: Trying to get rank for user_id={user_id}, chat_id={chat_id}")
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT rank FROM ranks WHERE user_id = ? AND chat_id = ?", (user_id, chat_id))
    result = cursor.fetchone()
    conn.close()
    logger.debug(f"get_rank: Rank retrieved: {result}")
    return result[0] if result else 1


def set_rank(user_id, chat_id, rank):
    logger.debug(f"set_rank: Trying to set rank {rank} for user_id={user_id}, chat_id={chat_id}")
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("INSERT OR REPLACE INTO ranks (user_id, chat_id, rank) VALUES (?, ?, ?)", (user_id, chat_id, rank))
    conn.commit()
    conn.close()
    logger.debug(f"set_rank: Rank set successfully.")


def get_user_id_from_mention(message, username):
    try:
        entities = message.entities
        for entity in entities:
            if entity.type == "mention" and entity.user.username == username:
                return entity.user.id
        return None
    except Exception as e:
        logger.exception(f"Ошибка в get_user_id_from_mention: {e}")
        return None


def get_user_id_from_username(bot, chat_id, username):
    logger.debug(f"get_user_id_from_username: Trying to find user @{username} in chat {chat_id}")
    try:
        user = bot.get_chat_member(chat_id, f"@{username}")
        if user is None:
            logger.warning(f"get_user_id_from_username: User @{username} not found (get_chat_member returned None).")
            return None
        logger.debug(f"get_user_id_from_username: User @{username} found. Status: {user.status}")
        if user.status not in ["member", "administrator", "creator"]:
            logger.warning(f"get_user_id_from_username: User @{username} is not a member of the chat.")
            return None
        user_id = user.user.id
        logger.debug(f"get_user_id_from_username: User @{username} found, user_id={user_id}")
        return user_id
    except telebot.apihelper.ApiException as e:
        logger.exception(f"Ошибка API Telegram в get_user_id_from_username: {e}")
        return None
    except Exception as e:
        logger.exception(f"Непредвиденная ошибка в get_user_id_from_username: {e}")
        return None


def get_owner(chat_id):
    try:
        admins = bot.get_chat_administrators(chat_id)
        owner = next((admin for admin in admins if admin.status == "creator"), None)
        if owner:
            return {'user_id': owner.user.id, 'username': owner.user.username}
        else:
            return None
    except Exception as e:
        logger.exception(f"Ошибка получения владельца: {e}")
        return None


def promote_user(message, target_user_id):
    chat_id = message.chat.id
    logger.debug(f"promote_user: Trying to promote user {target_user_id} in chat {chat_id}")
    try:
        if target_user_id is None:
            logger.warning("promote_user: target_user_id is None")
            bot.reply_to(message, "Ошибка: Пользователь не найден.")
            return

        if target_user_id == message.from_user.id:
            bot.reply_to(message, "Вы не можете повысить свой собственный ранг.")
            return

        logger.debug(f"promote_user: Getting current rank for user {target_user_id}...")
        current_rank = get_rank(target_user_id, chat_id)
        logger.debug(f"promote_user: Current rank retrieved: {current_rank}")

        new_rank = min(current_rank + 1, 3)
        logger.debug(f"promote_user: Setting new rank {new_rank} for user {target_user_id}...")
        set_rank(target_user_id, chat_id, new_rank)
        logger.debug(f"promote_user: New rank set successfully.")

        logger.debug(f"promote_user: Getting chat member info for user {target_user_id}...")
        target_user = bot.get_chat_member(chat_id, target_user_id).user
        username = target_user.username
        logger.debug(f"promote_user: Username retrieved: {username}")
        bot.reply_to(message, f"Ранг пользователя @{username} повышен до {new_rank}")
        logger.debug(f"promote_user: User @{username} promoted to rank {new_rank}")
    except telebot.apihelper.ApiException as e:
        logger.exception(f"Ошибка API Telegram в promote_user: {e}")
        bot.reply_to(message, f"Ошибка API Telegram: {e}")
    except Exception as e:
        logger.exception(f"Произошла ошибка в promote_user: {e}")
        bot.reply_to(message, f"Произошла ошибка: {e}")


def demote_user(message, target_user_id):
    chat_id = message.chat.id
    logger.debug(f"demote_user: Trying to demote user {target_user_id} in chat {chat_id}")
    try:
        if target_user_id == message.from_user.id:
            bot.reply_to(message, "Вы не можете понизить свой собственный ранг.")
            return
        current_rank = get_rank(target_user_id, chat_id)
        new_rank = max(current_rank - 1, 1)
        set_rank(target_user_id, chat_id, new_rank)
        target_user = bot.get_chat_member(chat_id, target_user_id).user
        username = target_user.username
        bot.reply_to(message, f"Ранг пользователя @{username} понижен до {new_rank}")
        logger.debug(f"demote_user: User @{username} demoted to rank {new_rank}")
    except telebot.apihelper.ApiException as e:
        logger.exception(f"Ошибка API Telegram в demote_user: {e}")
        bot.reply_to(message, f"Ошибка API Telegram: {e}")
    except Exception as e:
        logger.exception(f"Произошла ошибка в demote_user: {e}")
        bot.reply_to(message, f"Произошла ошибка: {e}")


@bot.message_handler(commands=['up'])
def handle_up_command(message):
    chat_id = message.chat.id
    if get_rank(message.from_user.id, chat_id) >= 2:
        try:
            args = message.text.split()[1:]
            if len(args) == 0:
                bot.reply_to(message, "Неправильный формат команды. Используйте /up @username [rank] или /up [rank] в ответ на сообщение")
                return

            if message.reply_to_message:  # Проверка на ответ на сообщение
                target_user_id = message.reply_to_message.from_user.id
                if len(args) > 0:
                    try:
                        new_rank = int(args[0])
                        set_rank(target_user_id, chat_id, new_rank)
                        bot.reply_to(message, f"Ранг пользователя @{message.reply_to_message.from_user.username} изменен на {new_rank}")
                    except ValueError:
                        bot.reply_to(message, "Неправильный формат ранга. Используйте целое число.")
                else:
                    promote_user(message, target_user_id)


            elif len(args) > 0:  #Если это не ответ на сообщение и есть аргументы
                try:
                    target_username = args[0].lstrip('@')
                    target_user_id = get_user_id_from_username(bot, chat_id, target_username)
                    if target_user_id:
                        if len(args) > 1:
                            try:
                                new_rank = int(args[1])
                                set_rank(target_user_id, chat_id, new_rank)
                                bot.reply_to(message, f"Ранг пользователя @{target_username} изменен на {new_rank}")
                            except ValueError:
                                bot.reply_to(message, "Неправильный формат ранга. Используйте целое число.")
                        else:
                            promote_user(message, target_user_id)
                    else:
                        bot.reply_to(message, "Пользователь не найден.")
                except (IndexError, ValueError) as e:
                    bot.reply_to(message, f"Ошибка: {e}")

            else:
                bot.reply_to(message, "Неправильный формат команды. Используйте /up @username [rank] или /up [rank] в ответ на сообщение")
        except Exception as e:
            logger.exception(f"Произошла ошибка в handle_up_command: {e}")
            bot.reply_to(message, f"Произошла непредвиденная ошибка: {e}")
    else:
        bot.reply_to(message, "У вас недостаточно прав.")


@bot.message_handler(commands=['down'])
def handle_down_command(message):
    chat_id = message.chat.id
    if get_rank(message.from_user.id, chat_id) >= 2:
        try:
            target_username = message.text.split()[1].lstrip('@')
            target_user_id = get_user_id_from_username(bot, chat_id, target_username)
            if target_user_id:
                demote_user(message, target_user_id)
            else:
                bot.reply_to(message, "Пользователь не найден.")
        except (IndexError, ValueError):
            bot.reply_to(message, "Неправильный формат команды. Используйте /down @username")
    else:
        bot.reply_to(message, "У вас недостаточно прав.")


@bot.message_handler(func=lambda message: message.text == "проверить")
def check_owner(message):
    chat_id = message.chat.id
    owner = get_owner(chat_id)
    if owner:
        current_rank = get_rank(owner['user_id'], chat_id)
        if current_rank == 4:
            bot.reply_to(message, f"☺️ | Владелец уже определен. Это @{owner['username']}")
        else:
            set_rank(owner['user_id'], chat_id, 4)
            bot.reply_to(message, f"👑 | Владелец чата определен... @{owner['username']}!")
            try:
                sent_message = bot.send_message(message.chat.id, f"👑 | Владелец чата определен... @{owner['username']}!")
                bot.pin_chat_message(message.chat.id, sent_message.message_id)
                logger.debug(f"Сообщение закреплено: {sent_message.message_id}")
            except telebot.apihelper.ApiException as e:
                logger.error(f"Ошибка при закреплении сообщения: {e}")
                bot.reply_to(message, f"Ошибка при закреплении сообщения: {e}")
            except Exception as e:
                logger.exception(f"Непредвиденная ошибка при закреплении сообщения: {e}")
                bot.reply_to(message, "Произошла ошибка при закреплении сообщения.")

    else:
        bot.reply_to(message, "Не удалось определить владельца чата.")


@bot.message_handler(commands=['check'])
def check_rank(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    rank = get_rank(user_id, chat_id)
    bot.reply_to(message, f"Ваш ранг: {rank}")


me = bot.get_me()
logger.debug(f"Bot information: {me}")
create_db()
logger.debug("Bot is starting polling...")
bot.polling()
