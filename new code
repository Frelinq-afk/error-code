import sqlite3
import telebot
from telebot import types
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(filename)s - %(lineno)d - %(message)s')
logger = logging.getLogger(__name__)

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!
BOT_TOKEN = ''  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
bot = telebot.TeleBot(BOT_TOKEN)

DB_PATH = 'rank.db'


def create_db():
    logger.debug("create_db: Creating or connecting to the database...")
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS ranks (
            user_id INTEGER PRIMARY KEY,
            chat_id INTEGER,
            rank INTEGER
        )
    ''')
    conn.commit()
    conn.close()
    logger.debug("create_db: Database operation completed successfully.")


def get_rank(user_id, chat_id):
    logger.debug(f"get_rank: Trying to get rank for user_id={user_id}, chat_id={chat_id}")
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT rank FROM ranks WHERE user_id = ? AND chat_id = ?", (user_id, chat_id))
    result = cursor.fetchone()
    conn.close()
    logger.debug(f"get_rank: Rank retrieved: {result}")
    return result[0] if result else 1


def set_rank(user_id, chat_id, rank):
    logger.debug(f"set_rank: Trying to set rank {rank} for user_id={user_id}, chat_id={chat_id}")
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("INSERT OR REPLACE INTO ranks (user_id, chat_id, rank) VALUES (?, ?, ?)", (user_id, chat_id, rank))
    conn.commit()
    conn.close()
    logger.debug(f"set_rank: Rank set successfully.")


def get_user_id_from_mention(message, username):
    try:
        entities = message.entities
        for entity in entities:
            if entity.type == "mention" and entity.user.username == username:
                return entity.user.id
        return None
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ get_user_id_from_mention: {e}")
        return None


def get_user_id_from_username(bot, chat_id, username):
    logger.debug(f"get_user_id_from_username: Trying to find user {username} in chat {chat_id}")
    try:
        member = bot.get_chat_member(chat_id, f"@{username}")
        if member is None:
            logger.warning(f"get_user_id_from_username: User {username} not found.")
            return None
        if member.status not in ["member", "administrator", "creator"]:
            logger.warning(f"get_user_id_from_username: User {username} is not a member of the chat.")
            return None
        user_id = member.user.id
        logger.debug(f"get_user_id_from_username: User {username} found, user_id={user_id}")
        return user_id
    except telebot.apihelper.ApiException as e:
        logger.exception(f"–û—à–∏–±–∫–∞ API Telegram –≤ get_user_id_from_username: {e}")
        return None
    except Exception as e:
        logger.exception(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ get_user_id_from_username: {e}")
        return None


def get_owner(chat_id):
    try:
        admins = bot.get_chat_administrators(chat_id)
        owner = next((admin for admin in admins if admin.status == "creator"), None)
        if owner:
            return {'user_id': owner.user.id, 'username': owner.user.username}
        else:
            return None
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞: {e}")
        return None


def promote_user(message, target_user_id):
    chat_id = message.chat.id
    # ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...


def demote_user(message, target_user_id):
    chat_id = message.chat.id
    # ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...


@bot.message_handler(commands=['up'])
def handle_up(message):
    text = message.text.split()
    chat_id = message.chat.id

    if get_rank(message.from_user.id, chat_id) < 2:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return

    if len(text) == 3:  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º /up @username —Ä–∞–Ω–≥
        try:
            username = text[1]
            rank = int(text[2])
            if not username.startswith('@'):
                bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç username. –î–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @")
                return
            username = username.lstrip('@')
            target_user_id = get_user_id_from_username(bot, chat_id, username)
            if target_user_id:
                set_rank(target_user_id, chat_id, rank)
                bot.reply_to(message, f"–†–∞–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {rank}")
            else:
                bot.reply_to(message, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except ValueError:
            bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /up @username —Ä–∞–Ω–≥ (1-3).")
        except IndexError:
            bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /up @username —Ä–∞–Ω–≥ (1-3).")
    elif len(text) == 2 and message.reply_to_message:  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º /up —Ä–∞–Ω–≥ (–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)
        try:
            rank = int(text[1])
            user_id = message.reply_to_message.from_user.id
            set_rank(user_id, chat_id, rank)
            bot.reply_to(message, f"–†–∞–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.reply_to_message.from_user.username} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {rank}")
        except ValueError:
            bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /up 1-3.")
    else:
        bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /up @username —Ä–∞–Ω–≥ (1-3) –∏–ª–∏ /up 1-3 –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")



@bot.message_handler(commands=['down'])
def handle_down_command(message):
    chat_id = message.chat.id
    if get_rank(message.from_user.id, chat_id) >= 2:
        try:
            target_username = message.text.split()[1].lstrip('@')
            target_user_id = get_user_id_from_username(bot, chat_id, target_username)
            if target_user_id:
                demote_user(message, target_user_id)
            else:
                bot.reply_to(message, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except (IndexError, ValueError):
            bot.reply_to(message, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /down @username")
    else:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")


@bot.message_handler(func=lambda message: message.text == "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å")
def check_owner(message):
    chat_id = message.chat.id
    owner = get_owner(chat_id)
    if owner:
        current_rank = get_rank(owner['user_id'], chat_id)
        if current_rank == 4:
            bot.reply_to(message, f"‚ò∫Ô∏è | –í–ª–∞–¥–µ–ª–µ—Ü —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω. –≠—Ç–æ @{owner['username']}")
        else:
            set_rank(owner['user_id'], chat_id, 4)
            bot.reply_to(message, f"üëë | –í–ª–∞–¥–µ–ª–µ—Ü —á–∞—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω... @{owner['username']}!")
            try:
                sent_message = bot.send_message(message.chat.id, f"üëë | –í–ª–∞–¥–µ–ª–µ—Ü —á–∞—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω... @{owner['username']}!")
                bot.pin_chat_message(message.chat.id, sent_message.message_id)
                logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ: {sent_message.message_id}")
            except telebot.apihelper.ApiException as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            except Exception as e:
                logger.exception(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.")

    else:
        bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ —á–∞—Ç–∞.")


@bot.message_handler(commands=['check'])
def check_rank(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    rank = get_rank(user_id, chat_id)
    bot.reply_to(message, f"–í–∞—à —Ä–∞–Ω–≥: {rank}")


me = bot.get_me()
logger.debug(f"Bot information: {me}")
create_db()
logger.debug("Bot is starting polling...")
bot.polling()
